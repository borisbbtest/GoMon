// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/borisbbtest/GoMon/internal/cmdb/database (interfaces: Storager)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	configs "github.com/borisbbtest/GoMon/internal/cmdb/configs"
	cmdb "github.com/borisbbtest/GoMon/internal/models/cmdb"
	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStoragerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorager)(nil).Close))
}

// CreateObject mocks base method.
func (m *MockStorager) CreateObject(arg0 context.Context, arg1 *configs.AppConfig, arg2 *cmdb.Ci) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockStoragerMockRecorder) CreateObject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockStorager)(nil).CreateObject), arg0, arg1, arg2)
}

// CreateTables mocks base method.
func (m *MockStorager) CreateTables(arg0 context.Context, arg1 *configs.AppConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTables", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables.
func (mr *MockStoragerMockRecorder) CreateTables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*MockStorager)(nil).CreateTables), arg0, arg1)
}

// DeleteObject mocks base method.
func (m *MockStorager) DeleteObject(arg0 context.Context, arg1 *configs.AppConfig, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockStoragerMockRecorder) DeleteObject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockStorager)(nil).DeleteObject), arg0, arg1, arg2)
}

// GetObject mocks base method.
func (m *MockStorager) GetObject(arg0 context.Context, arg1 *configs.AppConfig, arg2 string) (*cmdb.Ci, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cmdb.Ci)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockStoragerMockRecorder) GetObject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockStorager)(nil).GetObject), arg0, arg1, arg2)
}

// TruncateTables mocks base method.
func (m *MockStorager) TruncateTables(arg0 context.Context, arg1 *configs.AppConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateTables", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateTables indicates an expected call of TruncateTables.
func (mr *MockStoragerMockRecorder) TruncateTables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateTables", reflect.TypeOf((*MockStorager)(nil).TruncateTables), arg0, arg1)
}
