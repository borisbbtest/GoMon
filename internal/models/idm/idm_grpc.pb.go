// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: idm.proto

package idm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdmClient is the client API for Idm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdmClient interface {
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	CreationSession(ctx context.Context, in *CreationSessionRequest, opts ...grpc.CallOption) (*CreationSessionResponse, error)
	DeletionSession(ctx context.Context, in *DeletionSessionRequest, opts ...grpc.CallOption) (*DeletionSessionResponse, error)
	GetAllSession(ctx context.Context, in *GetAllSessionRequest, opts ...grpc.CallOption) (*GetAllSessionResponse, error)
	CreationUser(ctx context.Context, in *CreationUserRequest, opts ...grpc.CallOption) (*CreationUserResponse, error)
	DeletionUser(ctx context.Context, in *DeletionUserRequest, opts ...grpc.CallOption) (*DeletionUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetListUserAll(ctx context.Context, in *GetListUserAllRequest, opts ...grpc.CallOption) (*GetListUserAllResponse, error)
	Authorization(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
}

type idmClient struct {
	cc grpc.ClientConnInterface
}

func NewIdmClient(cc grpc.ClientConnInterface) IdmClient {
	return &idmClient{cc}
}

func (c *idmClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) CreationSession(ctx context.Context, in *CreationSessionRequest, opts ...grpc.CallOption) (*CreationSessionResponse, error) {
	out := new(CreationSessionResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/CreationSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) DeletionSession(ctx context.Context, in *DeletionSessionRequest, opts ...grpc.CallOption) (*DeletionSessionResponse, error) {
	out := new(DeletionSessionResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/DeletionSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) GetAllSession(ctx context.Context, in *GetAllSessionRequest, opts ...grpc.CallOption) (*GetAllSessionResponse, error) {
	out := new(GetAllSessionResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/GetAllSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) CreationUser(ctx context.Context, in *CreationUserRequest, opts ...grpc.CallOption) (*CreationUserResponse, error) {
	out := new(CreationUserResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/CreationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) DeletionUser(ctx context.Context, in *DeletionUserRequest, opts ...grpc.CallOption) (*DeletionUserResponse, error) {
	out := new(DeletionUserResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/DeletionUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) GetListUserAll(ctx context.Context, in *GetListUserAllRequest, opts ...grpc.CallOption) (*GetListUserAllResponse, error) {
	out := new(GetListUserAllResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/GetListUserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) Authorization(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/Authorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/idmgrpc.idm/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdmServer is the server API for Idm service.
// All implementations must embed UnimplementedIdmServer
// for forward compatibility
type IdmServer interface {
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	CreationSession(context.Context, *CreationSessionRequest) (*CreationSessionResponse, error)
	DeletionSession(context.Context, *DeletionSessionRequest) (*DeletionSessionResponse, error)
	GetAllSession(context.Context, *GetAllSessionRequest) (*GetAllSessionResponse, error)
	CreationUser(context.Context, *CreationUserRequest) (*CreationUserResponse, error)
	DeletionUser(context.Context, *DeletionUserRequest) (*DeletionUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetListUserAll(context.Context, *GetListUserAllRequest) (*GetListUserAllResponse, error)
	Authorization(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	mustEmbedUnimplementedIdmServer()
}

// UnimplementedIdmServer must be embedded to have forward compatible implementations.
type UnimplementedIdmServer struct {
}

func (UnimplementedIdmServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedIdmServer) CreationSession(context.Context, *CreationSessionRequest) (*CreationSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreationSession not implemented")
}
func (UnimplementedIdmServer) DeletionSession(context.Context, *DeletionSessionRequest) (*DeletionSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletionSession not implemented")
}
func (UnimplementedIdmServer) GetAllSession(context.Context, *GetAllSessionRequest) (*GetAllSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSession not implemented")
}
func (UnimplementedIdmServer) CreationUser(context.Context, *CreationUserRequest) (*CreationUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreationUser not implemented")
}
func (UnimplementedIdmServer) DeletionUser(context.Context, *DeletionUserRequest) (*DeletionUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletionUser not implemented")
}
func (UnimplementedIdmServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedIdmServer) GetListUserAll(context.Context, *GetListUserAllRequest) (*GetListUserAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserAll not implemented")
}
func (UnimplementedIdmServer) Authorization(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorization not implemented")
}
func (UnimplementedIdmServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedIdmServer) mustEmbedUnimplementedIdmServer() {}

// UnsafeIdmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdmServer will
// result in compilation errors.
type UnsafeIdmServer interface {
	mustEmbedUnimplementedIdmServer()
}

func RegisterIdmServer(s grpc.ServiceRegistrar, srv IdmServer) {
	s.RegisterService(&Idm_ServiceDesc, srv)
}

func _Idm_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_CreationSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreationSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).CreationSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/CreationSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).CreationSession(ctx, req.(*CreationSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_DeletionSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletionSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).DeletionSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/DeletionSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).DeletionSession(ctx, req.(*DeletionSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_GetAllSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).GetAllSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/GetAllSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).GetAllSession(ctx, req.(*GetAllSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_CreationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).CreationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/CreationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).CreationUser(ctx, req.(*CreationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_DeletionUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletionUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).DeletionUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/DeletionUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).DeletionUser(ctx, req.(*DeletionUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_GetListUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUserAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).GetListUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/GetListUserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).GetListUserAll(ctx, req.(*GetListUserAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/Authorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).Authorization(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idm_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.idm/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Idm_ServiceDesc is the grpc.ServiceDesc for Idm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Idm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idmgrpc.idm",
	HandlerType: (*IdmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Idm_GetSession_Handler,
		},
		{
			MethodName: "CreationSession",
			Handler:    _Idm_CreationSession_Handler,
		},
		{
			MethodName: "DeletionSession",
			Handler:    _Idm_DeletionSession_Handler,
		},
		{
			MethodName: "GetAllSession",
			Handler:    _Idm_GetAllSession_Handler,
		},
		{
			MethodName: "CreationUser",
			Handler:    _Idm_CreationUser_Handler,
		},
		{
			MethodName: "DeletionUser",
			Handler:    _Idm_DeletionUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Idm_GetUser_Handler,
		},
		{
			MethodName: "GetListUserAll",
			Handler:    _Idm_GetListUserAll_Handler,
		},
		{
			MethodName: "Authorization",
			Handler:    _Idm_Authorization_Handler,
		},
		{
			MethodName: "Registration",
			Handler:    _Idm_Registration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idm.proto",
}
