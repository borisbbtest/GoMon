// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: cmdb.proto

package cmdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdbClient is the client API for Cmdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdbClient interface {
	PushObject(ctx context.Context, in *PushObjectRequest, opts ...grpc.CallOption) (*PushObjectResponse, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	PushBatchObject(ctx context.Context, in *PushBatchObjectsRequest, opts ...grpc.CallOption) (*PushBatchObjectsResponse, error)
	GetBatchObject(ctx context.Context, in *GetBatchObjectsRequest, opts ...grpc.CallOption) (*GetBatchObjectsResponse, error)
	DeleteBatchObject(ctx context.Context, in *DeleteBatchObjectsRequest, opts ...grpc.CallOption) (*DeleteBatchObjectsResponse, error)
}

type cmdbClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdbClient(cc grpc.ClientConnInterface) CmdbClient {
	return &cmdbClient{cc}
}

func (c *cmdbClient) PushObject(ctx context.Context, in *PushObjectRequest, opts ...grpc.CallOption) (*PushObjectResponse, error) {
	out := new(PushObjectResponse)
	err := c.cc.Invoke(ctx, "/cmdbgrpc.cmdb/PushObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, "/cmdbgrpc.cmdb/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/cmdbgrpc.cmdb/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) PushBatchObject(ctx context.Context, in *PushBatchObjectsRequest, opts ...grpc.CallOption) (*PushBatchObjectsResponse, error) {
	out := new(PushBatchObjectsResponse)
	err := c.cc.Invoke(ctx, "/cmdbgrpc.cmdb/PushBatchObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) GetBatchObject(ctx context.Context, in *GetBatchObjectsRequest, opts ...grpc.CallOption) (*GetBatchObjectsResponse, error) {
	out := new(GetBatchObjectsResponse)
	err := c.cc.Invoke(ctx, "/cmdbgrpc.cmdb/GetBatchObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdbClient) DeleteBatchObject(ctx context.Context, in *DeleteBatchObjectsRequest, opts ...grpc.CallOption) (*DeleteBatchObjectsResponse, error) {
	out := new(DeleteBatchObjectsResponse)
	err := c.cc.Invoke(ctx, "/cmdbgrpc.cmdb/DeleteBatchObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdbServer is the server API for Cmdb service.
// All implementations must embed UnimplementedCmdbServer
// for forward compatibility
type CmdbServer interface {
	PushObject(context.Context, *PushObjectRequest) (*PushObjectResponse, error)
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	PushBatchObject(context.Context, *PushBatchObjectsRequest) (*PushBatchObjectsResponse, error)
	GetBatchObject(context.Context, *GetBatchObjectsRequest) (*GetBatchObjectsResponse, error)
	DeleteBatchObject(context.Context, *DeleteBatchObjectsRequest) (*DeleteBatchObjectsResponse, error)
	mustEmbedUnimplementedCmdbServer()
}

// UnimplementedCmdbServer must be embedded to have forward compatible implementations.
type UnimplementedCmdbServer struct {
}

func (UnimplementedCmdbServer) PushObject(context.Context, *PushObjectRequest) (*PushObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushObject not implemented")
}
func (UnimplementedCmdbServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedCmdbServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedCmdbServer) PushBatchObject(context.Context, *PushBatchObjectsRequest) (*PushBatchObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushBatchObject not implemented")
}
func (UnimplementedCmdbServer) GetBatchObject(context.Context, *GetBatchObjectsRequest) (*GetBatchObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchObject not implemented")
}
func (UnimplementedCmdbServer) DeleteBatchObject(context.Context, *DeleteBatchObjectsRequest) (*DeleteBatchObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchObject not implemented")
}
func (UnimplementedCmdbServer) mustEmbedUnimplementedCmdbServer() {}

// UnsafeCmdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdbServer will
// result in compilation errors.
type UnsafeCmdbServer interface {
	mustEmbedUnimplementedCmdbServer()
}

func RegisterCmdbServer(s grpc.ServiceRegistrar, srv CmdbServer) {
	s.RegisterService(&Cmdb_ServiceDesc, srv)
}

func _Cmdb_PushObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).PushObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdbgrpc.cmdb/PushObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).PushObject(ctx, req.(*PushObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdbgrpc.cmdb/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdbgrpc.cmdb/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_PushBatchObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushBatchObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).PushBatchObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdbgrpc.cmdb/PushBatchObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).PushBatchObject(ctx, req.(*PushBatchObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_GetBatchObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).GetBatchObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdbgrpc.cmdb/GetBatchObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).GetBatchObject(ctx, req.(*GetBatchObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmdb_DeleteBatchObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).DeleteBatchObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdbgrpc.cmdb/DeleteBatchObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).DeleteBatchObject(ctx, req.(*DeleteBatchObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cmdb_ServiceDesc is the grpc.ServiceDesc for Cmdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cmdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmdbgrpc.cmdb",
	HandlerType: (*CmdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushObject",
			Handler:    _Cmdb_PushObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _Cmdb_GetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Cmdb_DeleteObject_Handler,
		},
		{
			MethodName: "PushBatchObject",
			Handler:    _Cmdb_PushBatchObject_Handler,
		},
		{
			MethodName: "GetBatchObject",
			Handler:    _Cmdb_GetBatchObject_Handler,
		},
		{
			MethodName: "DeleteBatchObject",
			Handler:    _Cmdb_DeleteBatchObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmdb.proto",
}
