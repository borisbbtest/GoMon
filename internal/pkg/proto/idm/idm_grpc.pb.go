// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: idm.proto

package idm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponce, error)
	CreationSession(ctx context.Context, in *CreationSessionRequest, opts ...grpc.CallOption) (*CreationSessionResponce, error)
	DeletionSession(ctx context.Context, in *DeletionSessionRequest, opts ...grpc.CallOption) (*DeletionSessionResponce, error)
	GetAllSession(ctx context.Context, in *GetAllSessionRequest, opts ...grpc.CallOption) (*GetAllSessionResponce, error)
	CreationUser(ctx context.Context, in *CreationUserRequest, opts ...grpc.CallOption) (*CreationUserResponce, error)
	DeletionUser(ctx context.Context, in *DeletionUserRequest, opts ...grpc.CallOption) (*DeletionUserResponce, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponce, error)
	GetListUserAll(ctx context.Context, in *GetListUserAllRequest, opts ...grpc.CallOption) (*GetListUserAllResponce, error)
	Authorization(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponce, error)
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponce, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponce, error) {
	out := new(GetSessionResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) CreationSession(ctx context.Context, in *CreationSessionRequest, opts ...grpc.CallOption) (*CreationSessionResponce, error) {
	out := new(CreationSessionResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/CreationSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) DeletionSession(ctx context.Context, in *DeletionSessionRequest, opts ...grpc.CallOption) (*DeletionSessionResponce, error) {
	out := new(DeletionSessionResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/DeletionSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetAllSession(ctx context.Context, in *GetAllSessionRequest, opts ...grpc.CallOption) (*GetAllSessionResponce, error) {
	out := new(GetAllSessionResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/GetAllSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) CreationUser(ctx context.Context, in *CreationUserRequest, opts ...grpc.CallOption) (*CreationUserResponce, error) {
	out := new(CreationUserResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/CreationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) DeletionUser(ctx context.Context, in *DeletionUserRequest, opts ...grpc.CallOption) (*DeletionUserResponce, error) {
	out := new(DeletionUserResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/DeletionUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponce, error) {
	out := new(GetUserResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetListUserAll(ctx context.Context, in *GetListUserAllRequest, opts ...grpc.CallOption) (*GetListUserAllResponce, error) {
	out := new(GetListUserAllResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/GetListUserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Authorization(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponce, error) {
	out := new(AuthorizationResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/Authorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponce, error) {
	out := new(RegistrationResponce)
	err := c.cc.Invoke(ctx, "/idmgrpc.events/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility
type EventsServer interface {
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponce, error)
	CreationSession(context.Context, *CreationSessionRequest) (*CreationSessionResponce, error)
	DeletionSession(context.Context, *DeletionSessionRequest) (*DeletionSessionResponce, error)
	GetAllSession(context.Context, *GetAllSessionRequest) (*GetAllSessionResponce, error)
	CreationUser(context.Context, *CreationUserRequest) (*CreationUserResponce, error)
	DeletionUser(context.Context, *DeletionUserRequest) (*DeletionUserResponce, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponce, error)
	GetListUserAll(context.Context, *GetListUserAllRequest) (*GetListUserAllResponce, error)
	Authorization(context.Context, *AuthorizationRequest) (*AuthorizationResponce, error)
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponce, error)
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (UnimplementedEventsServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedEventsServer) CreationSession(context.Context, *CreationSessionRequest) (*CreationSessionResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreationSession not implemented")
}
func (UnimplementedEventsServer) DeletionSession(context.Context, *DeletionSessionRequest) (*DeletionSessionResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletionSession not implemented")
}
func (UnimplementedEventsServer) GetAllSession(context.Context, *GetAllSessionRequest) (*GetAllSessionResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSession not implemented")
}
func (UnimplementedEventsServer) CreationUser(context.Context, *CreationUserRequest) (*CreationUserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreationUser not implemented")
}
func (UnimplementedEventsServer) DeletionUser(context.Context, *DeletionUserRequest) (*DeletionUserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletionUser not implemented")
}
func (UnimplementedEventsServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedEventsServer) GetListUserAll(context.Context, *GetListUserAllRequest) (*GetListUserAllResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserAll not implemented")
}
func (UnimplementedEventsServer) Authorization(context.Context, *AuthorizationRequest) (*AuthorizationResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorization not implemented")
}
func (UnimplementedEventsServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_CreationSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreationSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).CreationSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/CreationSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).CreationSession(ctx, req.(*CreationSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_DeletionSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletionSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).DeletionSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/DeletionSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).DeletionSession(ctx, req.(*DeletionSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetAllSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetAllSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/GetAllSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetAllSession(ctx, req.(*GetAllSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_CreationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).CreationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/CreationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).CreationUser(ctx, req.(*CreationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_DeletionUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletionUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).DeletionUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/DeletionUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).DeletionUser(ctx, req.(*DeletionUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetListUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUserAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetListUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/GetListUserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetListUserAll(ctx, req.(*GetListUserAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/Authorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Authorization(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmgrpc.events/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idmgrpc.events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Events_GetSession_Handler,
		},
		{
			MethodName: "CreationSession",
			Handler:    _Events_CreationSession_Handler,
		},
		{
			MethodName: "DeletionSession",
			Handler:    _Events_DeletionSession_Handler,
		},
		{
			MethodName: "GetAllSession",
			Handler:    _Events_GetAllSession_Handler,
		},
		{
			MethodName: "CreationUser",
			Handler:    _Events_CreationUser_Handler,
		},
		{
			MethodName: "DeletionUser",
			Handler:    _Events_DeletionUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Events_GetUser_Handler,
		},
		{
			MethodName: "GetListUserAll",
			Handler:    _Events_GetListUserAll_Handler,
		},
		{
			MethodName: "Authorization",
			Handler:    _Events_Authorization_Handler,
		},
		{
			MethodName: "Registration",
			Handler:    _Events_Registration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idm.proto",
}
